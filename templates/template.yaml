AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  Pipeline:
    Type: String
    Description: The CodePipeline pipeline to start
  HeaderName:
    Type: String
  Token:
    Type: String
    NoEcho: true

Resources:
  Fn:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          import boto3
          import json

          def handler(event, context):
            assert event['headers']['${HeaderName}'] == '${Token}'

            client = boto3.client('codepipeline')
            client.start_pipeline_execution(name='${Pipeline}')
            print(event)
            return {
              'statusCode': 200,
              'body': '{}',
              'isBase64Encoded': False
            }
      Runtime: python3.6
      Handler: index.handler
      Role: !Sub '${Role.Arn}'
      Timeout: 30

  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns: ['arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole']
      Policies:
        - PolicyName: role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'codepipeline:StartPipelineExecution'
                Resource: '*'

  InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref Fn
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/*"

  Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      FailOnWarnings: true
      Name: !Sub ${AWS::StackName}

  Post:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Api
      PathPart: '{proxy+}'
      ParentId: !Sub '${Api.RootResourceId}'

  Method:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      RestApiId: !Ref Api
      AuthorizationType: NONE
      ResourceId: !Ref Post
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Fn.Arn}/invocations"

  Stage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref Deploy
      RestApiId: !Ref Api
      StageName: prod

  Deploy:
    Type: AWS::ApiGateway::Deployment
    DependsOn: Method
    Properties:
      RestApiId: !Ref Api

Outputs:
  ApiInvokeUrl:
    Description: Endpoint of the API
    Value: !Sub 'https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod'
